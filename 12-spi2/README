这异常程序主要演示ARM处理器从BROM到BOOT0,再到BOOT1的代码编写过程
其中BOOT0的入口程序为main.c,链接文件为boot.lds文件
BOOT1的入口程序为main2.c,链接文件为boot2.lds文件

boot0的主要工作是从MMC上加载boot1的代码到SDRAM中,之后跳转到SDRAM中执行boot1
之所以会采用boot0,boot1两级引导主要是因为,ARM内部的IRAM空间有限,无法实现比较复杂
的引导程序,这样boot0仅需要实现基本的SD和DDR初始化,即可将具有复杂功能的引导程序需加
载到SRAM中去执行,由于SRAM空间很大,所以boot1的尺寸理论上不受限制.

boot0被BROM加载到IRAM中执行,boot1被boot0加载到SRAM中运行,kernel又被boot1加载到
SRAM中运行.

如果系统开发不需要基于操作系统的话,boot1程序实际上也可以直接被开发成为一个裸机应用,
在不开起MMU的情况下,该裸机程序时可以通过物理地址操作系统所有的硬件资源,如果借助于
uboot的架构,完全可以构建一个基于uboot架构的,应用系统.只要在UBOOT基础上开发一套图形
应用即可.


########
本工程的主要目的如下:
1.在boot1阶段读取SD/MMC卡对应地址上的linux内核到DDR中.
2.初始化linux系统的引导参数.
3.跳转到linux内核的DDR地址,并执行kernel.
4.等待linux内核完成启动.
